<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法学习——动态规划</title>
    <link href="/2025/07/16/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2025/07/16/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>算法学习——队列/栈</title></head><body>  <article class="blog-content">  <p>动态规划解法确实有两种表现形式：</p>  <p>第一种是带备忘录的递归解法，或称为「自顶向下」的解法，一个递归函数带一个 memo 备忘录。</p>  <p>第二种是 DP table 的迭代解法，或称为「自底向上」的解法，用 for 循环去迭代 dp 数组进行求解。</p>  <h4>LeetCode-509：斐波那契数列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 备忘录全初始化为 -1</span><br>    <span class="hljs-comment">// 因为斐波那契数肯定是非负整数，所以初始化为特殊值 -1 表示未计算</span><br><br>    <span class="hljs-comment">// 因为数组的索引从 0 开始，所以需要 n + 1 个空间</span><br>    <span class="hljs-comment">// 这样才能把 `f(0) ~ f(n)` 都记录到 memo 中</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">memo</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)</span></span>;<br><br>    <span class="hljs-comment">// 进行带备忘录的递归</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dp</span>(memo, n);<br>&#125;<br><br><span class="hljs-comment">// 带着备忘录进行递归</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; memo, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// base case</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-comment">// 已经计算过，不用再计算了</span><br>    <span class="hljs-keyword">if</span> (memo[n] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> memo[n];<br>    &#125;<br>    <span class="hljs-comment">// 在返回结果之前，存入备忘录</span><br>    memo[n] = <span class="hljs-built_in">dp</span>(memo, n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">dp</span>(memo, n - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> memo[n];<br>&#125;<br></code></pre></td></tr></table></figure>  <h4>LeetCode-322：零钱兑换</h4>  <p>带备忘录递归方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; memo;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">int</span> amount)</span> </span>&#123;<br>        memo = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; (amount + <span class="hljs-number">1</span>, <span class="hljs-number">-666</span>);<br>        <span class="hljs-comment">// 备忘录初始化为一个不会被取到的特殊值，代表还未被计算</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dp</span>(coins, amount);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">int</span> amount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (amount == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (amount &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">// 查备忘录，防止重复计算</span><br>        <span class="hljs-keyword">if</span> (memo[amount] != <span class="hljs-number">-666</span>)<br>            <span class="hljs-keyword">return</span> memo[amount];<br><br>        <span class="hljs-type">int</span> res = INT_MAX;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> coin : coins) &#123;<br>            <span class="hljs-comment">// 计算子问题的结果</span><br>            <span class="hljs-type">int</span> subProblem = <span class="hljs-built_in">dp</span>(coins, amount - coin);<br>            <span class="hljs-comment">// 子问题无解则跳过</span><br>            <span class="hljs-keyword">if</span> (subProblem == <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 在子问题中选择最优解，然后加一</span><br>            res = <span class="hljs-built_in">min</span>(res, subProblem + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 把计算结果存入备忘录</span><br>        memo[amount] = (res == INT_MAX) ? <span class="hljs-number">-1</span> : res;<br>        <span class="hljs-keyword">return</span> memo[amount];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  <p>dp数组迭代解法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">int</span> amount)</span> </span>&#123;<br>        <span class="hljs-comment">// 数组大小为 amount + 1，初始值也为 amount + 1</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(amount + <span class="hljs-number">1</span>, amount + <span class="hljs-number">1</span>)</span></span>;<br><br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// base case</span><br>        <span class="hljs-comment">// 外层 for 循环在遍历所有状态的所有取值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; dp.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-comment">// 内层 for 循环在求所有选择的最小值</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> coin : coins) &#123;<br>                <span class="hljs-comment">// 子问题无解，跳过</span><br>                <span class="hljs-keyword">if</span> (i - coin &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                dp[i] = <span class="hljs-built_in">min</span>(dp[i], <span class="hljs-number">1</span> + dp[i - coin]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (dp[amount] == amount + <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : dp[amount];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  </article></body></html>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>编程</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习——DFS/回溯算法</title>
    <link href="/2025/07/16/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94DFS%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <url>/2025/07/16/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94DFS%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>算法学习——队列/栈</title></head><body>  <article class="blog-content">  <h4>LeetCode-46：全排列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    vector &lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>    vector&lt;<span class="hljs-type">int</span>&gt; track;<br>    vector&lt;<span class="hljs-type">bool</span>&gt; used;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permute</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        used = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(nums.<span class="hljs-built_in">size</span>(),<span class="hljs-literal">false</span>);<br>        <span class="hljs-built_in">backtrack</span>(nums);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(track.<span class="hljs-built_in">size</span>()==nums.<span class="hljs-built_in">size</span>())&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(track.<span class="hljs-built_in">begin</span>(),track.<span class="hljs-built_in">end</span>()));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i= <span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">if</span>(used[i])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            used[i]=<span class="hljs-literal">true</span>;<br>            track.<span class="hljs-built_in">push_back</span>(nums[i]);<br><br>            <span class="hljs-built_in">backtrack</span>(nums);<br><br>            track.<span class="hljs-built_in">pop_back</span>();<br>            used[i]=<span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  <h4>LeetCode-77：组合</h4>  <p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。你可以按任何顺序返回答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>    <span class="hljs-comment">// 记录回溯算法的递归路径</span><br>    deque&lt;<span class="hljs-type">int</span>&gt; track;<br><br>    <span class="hljs-comment">// 主函数</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combine</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">1</span>, n, k);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">// base case  </span><br>        <span class="hljs-keyword">if</span> (k == track.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-comment">// 遍历到了第 k 层，收集当前节点的值</span><br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(track.<span class="hljs-built_in">begin</span>(), track.<span class="hljs-built_in">end</span>()));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 回溯算法标准框架</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start; i &lt;= n; i++) &#123;<br>            <span class="hljs-comment">// 选择</span><br>            track.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-comment">// 通过 start 参数控制树枝的遍历，避免产生重复的子集</span><br>            <span class="hljs-built_in">backtrack</span>(i + <span class="hljs-number">1</span>, n, k);<br>            <span class="hljs-comment">// 撤销选择</span><br>            track.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  <h4>LeetCode-78：求所有子集（数组无重复元素）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>    <span class="hljs-comment">// 记录回溯算法的递归路径</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; track;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 主函数</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-built_in">backtrack</span>(nums, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">// 回溯算法核心函数，遍历子集问题的回溯树</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> start)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 前序位置，每个节点的值都是一个子集</span><br>        res.<span class="hljs-built_in">push_back</span>(track);<br><br>        <span class="hljs-comment">// 回溯算法标准框架</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-comment">// 做选择</span><br>            track.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            <span class="hljs-comment">// 通过 start 参数控制树枝的遍历，避免产生重复的子集</span><br>            <span class="hljs-built_in">backtrack</span>(nums, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 撤销选择</span><br>            track.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>  <h4>LeetCode-90：求所有子集（数组有重复元素）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>    deque&lt;<span class="hljs-type">int</span>&gt; track;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsetsWithDup</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-comment">// 先排序，让相同的元素靠在一起</span><br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">backtrack</span>(nums, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> start)</span> </span>&#123;<br>        <span class="hljs-comment">// 前序位置，每个节点的值都是一个子集</span><br>        res.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(track.<span class="hljs-built_in">begin</span>(), track.<span class="hljs-built_in">end</span>()));<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-comment">// 剪枝逻辑，值相同的相邻树枝，只遍历第一条</span><br>            <span class="hljs-keyword">if</span> (i &gt; start &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            track.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            <span class="hljs-built_in">backtrack</span>(nums, i + <span class="hljs-number">1</span>);<br>            track.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  </article></body></html>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>编程</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习——二叉树</title>
    <link href="/2025/07/15/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2025/07/15/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>算法学习——队列/栈</title></head><body>  <article class="blog-content">  <h4>二叉树遍历框架</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 二叉树的遍历框架</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 前序位置</span><br>    <span class="hljs-built_in">traverse</span>(root-&gt;left);<br>    <span class="hljs-comment">// 中序位置</span><br>    <span class="hljs-built_in">traverse</span>(root-&gt;right);<br>    <span class="hljs-comment">// 后序位置</span><br>&#125;<br></code></pre></td></tr></table></figure>  <h4>LeetCode-226:翻转二叉树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 定义：将以 root 为根的这棵二叉树翻转，返回翻转后的二叉树的根节点</span><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        <span class="hljs-comment">// 利用函数定义，先翻转左右子树</span><br>        TreeNode* left = <span class="hljs-built_in">invertTree</span>(root-&gt;left);<br>        TreeNode* right = <span class="hljs-built_in">invertTree</span>(root-&gt;right);<br><br>        <span class="hljs-comment">// 然后交换左右子节点</span><br>        root-&gt;left = right;<br>        root-&gt;right = left;<br><br>        <span class="hljs-comment">// 和定义逻辑自恰：以 root 为根的这棵二叉树已经被翻转，返回 root</span><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  <h4>LeetCode-116:填充每个二叉树节点的右侧指针</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 主函数</span><br>    <span class="hljs-function">Node* <span class="hljs-title">connect</span><span class="hljs-params">(Node* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-comment">// 遍历「三叉树」，连接相邻节点</span><br>        <span class="hljs-built_in">traverse</span>(root-&gt;left, root-&gt;right);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-comment">// 三叉树遍历框架</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(Node* node1, Node* node2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node1 == <span class="hljs-literal">nullptr</span> || node2 == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// *** 前序位置 ***</span><br>        <span class="hljs-comment">// 将传入的两个节点穿起来</span><br>        node1-&gt;next = node2;<br>        <br>        <span class="hljs-comment">// 连接相同父节点的两个子节点</span><br>        <span class="hljs-built_in">traverse</span>(node1-&gt;left, node1-&gt;right);<br>        <span class="hljs-built_in">traverse</span>(node2-&gt;left, node2-&gt;right);<br>        <span class="hljs-comment">// 注意！！连接跨越父节点的两个子节点</span><br>        <span class="hljs-built_in">traverse</span>(node1-&gt;right, node2-&gt;left);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  <h4>LeetCode-114:将二叉树展开为链表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 定义：将以 root 为根的树拉平为链表</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">flatten</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// base case</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">// 利用定义，把左右子树拉平</span><br>        <span class="hljs-built_in">flatten</span>(root-&gt;left);<br>        <span class="hljs-built_in">flatten</span>(root-&gt;right);<br><br>        <span class="hljs-comment">// *** 后序遍历位置 ***</span><br>        <span class="hljs-comment">// 1、左右子树已经被拉平成一条链表</span><br>        TreeNode* left = root-&gt;left;<br>        TreeNode* right = root-&gt;right;<br><br>        <span class="hljs-comment">// 2、将左子树作为右子树</span><br>        root-&gt;left = <span class="hljs-literal">nullptr</span>;<br>        root-&gt;right = left;<br><br>        <span class="hljs-comment">// 3、将原先的右子树接到当前右子树的末端</span><br>        TreeNode* p = root;<br>        <span class="hljs-keyword">while</span> (p-&gt;right != <span class="hljs-literal">nullptr</span>) &#123;<br>            p = p-&gt;right;<br>        &#125;<br>        p-&gt;right = right;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  </article></body></html>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>编程</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习——队列/栈</title>
    <link href="/2025/07/15/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%98%9F%E5%88%97-%E6%A0%88/"/>
    <url>/2025/07/15/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%98%9F%E5%88%97-%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>算法学习——队列/栈</title></head><body>  <article class="blog-content"><p>队列是一种先进先出的数据结构，栈是一种先进后出的数据结构</p><h3>用栈实现队列</h3><h4>LeetCode-232:用栈实现队列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    stack&lt;<span class="hljs-type">int</span>&gt; s1, s2;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyQueue</span>() &#123;<br>        <span class="hljs-comment">// 使用两个栈 s1, s2 就能实现一个队列的功能！！</span><br>    &#125;<br><br>    <span class="hljs-comment">// 添加元素到队尾</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        s<span class="hljs-number">1.</span><span class="hljs-built_in">push</span>(x);<br>    &#125;<br><br>    <span class="hljs-comment">// 删除队头元素并返回</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 先调用 peek 保证 s2 非空</span><br>        <span class="hljs-built_in">peek</span>();<br>        <span class="hljs-type">int</span> topElement = s<span class="hljs-number">2.</span><span class="hljs-built_in">top</span>();<br>        s<span class="hljs-number">2.</span><span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> topElement;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回队头元素</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s<span class="hljs-number">2.</span><span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-comment">// 把 s1 元素压入 s2</span><br>            <span class="hljs-keyword">while</span> (!s<span class="hljs-number">1.</span><span class="hljs-built_in">empty</span>()) &#123;<br>                s<span class="hljs-number">2.</span><span class="hljs-built_in">push</span>(s<span class="hljs-number">1.</span><span class="hljs-built_in">top</span>());<br>                s<span class="hljs-number">1.</span><span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s<span class="hljs-number">2.</span><span class="hljs-built_in">top</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 判断队列是否为空</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> s<span class="hljs-number">1.</span><span class="hljs-built_in">empty</span>() &amp;&amp; s<span class="hljs-number">2.</span><span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3>用队列实现栈</h3><h4>LeetCode-225:用队列实现栈</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-type">int</span> top_elem = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 将元素 x 压入栈顶</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-comment">// x 是队列的队尾，是栈的栈顶</span><br>        q.<span class="hljs-built_in">push</span>(x);<br>        top_elem = x;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回栈顶元素</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> top_elem;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除栈顶的元素并返回</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> size = q.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// 留下队尾 2 个元素，留两个而不是一个主要是为了更新队尾元素</span><br>        <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">2</span>) &#123;<br>            q.<span class="hljs-built_in">push</span>(q.<span class="hljs-built_in">front</span>());<span class="hljs-comment">//把第一个元素插到队尾来</span><br>            q.<span class="hljs-built_in">pop</span>();<br>            size--;<br>        &#125;<br>        <span class="hljs-comment">// 记录新的队尾元素</span><br>        top_elem = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">push</span>(q.<span class="hljs-built_in">front</span>());<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">// 删除之前的队尾元素</span><br>        <span class="hljs-type">int</span> result = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断栈是否为空</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> q.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3>单调栈(找数组的下一个更大元素)</h3><h4>LeetCode-739:每日温度</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; temperatures)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = temperatures.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-comment">// 注意！这里放元素索引，而不是元素</span><br>        stack&lt;<span class="hljs-type">int</span>&gt; s;<br>        <span class="hljs-comment">// 单调栈模板,倒着往栈里放</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>() &amp;&amp; temperatures[s.<span class="hljs-built_in">top</span>()] &lt;= temperatures[i]) &#123;<br>                s.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-comment">// 得到索引间距</span><br>            res[i] = s.<span class="hljs-built_in">empty</span>() ? <span class="hljs-number">0</span> : (s.<span class="hljs-built_in">top</span>() - i);<br>            <span class="hljs-comment">// 将索引入栈，而不是元素</span><br>            s.<span class="hljs-built_in">push</span>(i); <br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4>LeetCode-503:下一个更大元素Ⅱ</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nextGreaterElements</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(n)</span></span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; s;<br>        <span class="hljs-comment">// 数组长度加倍模拟环形数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-comment">// 索引 i 要求模，其他的和模板一样</span><br>            <span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>() &amp;&amp; s.<span class="hljs-built_in">top</span>() &lt;= nums[i % n]) &#123;<br>                s.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            res[i % n] = s.<span class="hljs-built_in">empty</span>() ? <span class="hljs-number">-1</span> : s.<span class="hljs-built_in">top</span>();<br>            s.<span class="hljs-built_in">push</span>(nums[i % n]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3>单调队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 单调队列的实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MonotonicQueue</span> &#123;<br>    deque&lt;<span class="hljs-type">int</span>&gt; maxq;<span class="hljs-comment">// 普通队列queue只能对队头操作，双端队列deque可以对队头和队尾操作</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// 将小于 n 的元素全部删除</span><br>        <span class="hljs-keyword">while</span> (!maxq.<span class="hljs-built_in">empty</span>() &amp;&amp; maxq.<span class="hljs-built_in">back</span>() &lt; n) &#123;<br>            maxq.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>        <span class="hljs-comment">// 然后将 n 加入尾部</span><br>        maxq.<span class="hljs-built_in">push_back</span>(n);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> maxq.<span class="hljs-built_in">front</span>();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n == maxq.<span class="hljs-built_in">front</span>()) &#123;<br>            maxq.<span class="hljs-built_in">pop_front</span>();<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        MonotonicQueue window;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &lt; k - <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 先填满窗口的前 k - 1</span><br>                window.<span class="hljs-built_in">push</span>(nums[i]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 窗口向前滑动，加入新数字</span><br>                window.<span class="hljs-built_in">push</span>(nums[i]);<br>                <span class="hljs-comment">// 记录当前窗口的最大值</span><br>                res.<span class="hljs-built_in">push_back</span>(window.<span class="hljs-built_in">max</span>());<br>                <span class="hljs-comment">// 移出旧数字</span><br>                window.<span class="hljs-built_in">pop</span>(nums[i - k + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  </article></body></html>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>编程</tag>
      
      <tag>队列，栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习——数组</title>
    <link href="/2025/07/13/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/"/>
    <url>/2025/07/13/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>算法学习——数组</title></head><body>  <article class="blog-content"><h3>双指针——左右指针（相向而行）</h3><h4>二分查找</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-comment">// 一左一右两个指针相向而行</span><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> mid = (right + left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == target)<br>            <span class="hljs-keyword">return</span> mid; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>            left = mid + <span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>            right = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4>LeetCode-167:两数之和</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-comment">// 一左一右两个指针相向而行</span><br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> sum = numbers[left] + numbers[right];<br>            <span class="hljs-keyword">if</span> (sum == target) &#123;<br>                <span class="hljs-comment">// 题目要求的索引是从 1 开始的</span><br>                <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;left + <span class="hljs-number">1</span>, right + <span class="hljs-number">1</span>&#125;;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; target) &#123;<br>                <span class="hljs-comment">// 让 sum 大一点</span><br>                left++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; target) &#123;<br>                <span class="hljs-comment">// 让 sum 小一点</span><br>                right--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4>LeetCode-344:反转字符串</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(vector&lt;<span class="hljs-type">char</span>&gt;&amp; s)</span> </span>&#123;<br>    <span class="hljs-comment">// 一左一右两个指针相向而行</span><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-comment">// 交换 s[left] 和 s[right]</span><br>        <span class="hljs-type">char</span> temp = s[left];<br>        s[left] = s[right];<br>        s[right] = temp;<br>        left++;<br>        right--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4>LeetCode-5:最长回文字串</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        string res = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); i++) &#123;<br>            <span class="hljs-comment">// 以 s[i] 为中心的最长回文子串</span><br>            string s1 = <span class="hljs-built_in">palindrome</span>(s, i, i);<br>            <span class="hljs-comment">// 以 s[i] 和 s[i+1] 为中心的最长回文子串</span><br>            string s2 = <span class="hljs-built_in">palindrome</span>(s, i, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// res = longest(res, s1, s2)</span><br>            res = res.<span class="hljs-built_in">length</span>() &gt; s<span class="hljs-number">1.l</span>ength() ? res : s1;<br>            res = res.<span class="hljs-built_in">length</span>() &gt; s<span class="hljs-number">2.l</span>ength() ? res : s2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function">string <span class="hljs-title">palindrome</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-comment">// 防止索引越界</span><br>        <span class="hljs-keyword">while</span> (l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; s.<span class="hljs-built_in">length</span>() &amp;&amp; s[l] == s[r]) &#123;<br>            <span class="hljs-comment">// 向两边展开</span><br>            l--;<br>            r++;<br>        &#125;<br>        <span class="hljs-comment">// substr函数表示在s中从pos开始的len个字符的拷贝</span><br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(l + <span class="hljs-number">1</span>, r - l - <span class="hljs-number">1</span>);<span class="hljs-comment">//l+1是因为最后l--，r-l -1是因为最后r++</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3>双指针——滑动窗口</h3><h4>·LeetCode-76:最小覆盖子串</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">minWindow</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; need, window;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : t) &#123;<span class="hljs-comment">// 遍历字符串 t 中的每一个字符 c</span><br>            need[c]++;<span class="hljs-comment">// 将 need 中字符 c 的计数值增加 1</span><br>        &#125;<br><br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 记录window中的字符满足need条件的字符个数</span><br>        <span class="hljs-type">int</span> valid = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 记录最小覆盖子串的起始索引及长度</span><br>        <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>, len = INT_MAX;<br>        <span class="hljs-comment">//开始扩大窗口</span><br>        <span class="hljs-keyword">while</span> (right &lt; s.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-comment">// c 是将移入窗口的字符</span><br>            <span class="hljs-type">char</span> c = s[right];<br>            <span class="hljs-comment">// 扩大窗口</span><br>            right++;<br>            <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>            <span class="hljs-keyword">if</span> (need.<span class="hljs-built_in">count</span>(c)) &#123;<br>                window[c]++;<br>                <span class="hljs-keyword">if</span> (window[c] == need[c])<br>                    valid++;<br>            &#125;<br><br>            <span class="hljs-comment">// 判断左侧窗口是否要收缩（缩小窗口）</span><br>            <span class="hljs-keyword">while</span> (valid == need.<span class="hljs-built_in">size</span>()) &#123;<span class="hljs-comment">//need.size() 返回的是哈希表 need 中 ​键值对（Key-Value Pair）的数量</span><br>                <span class="hljs-comment">// 在这里更新最小覆盖子串</span><br>                <span class="hljs-keyword">if</span> (right - left &lt; len) &#123;<span class="hljs-comment">//提前记录一版</span><br>                    start = left;<br>                    len = right - left;<br>                &#125;<br>                <span class="hljs-comment">// d 是将移出窗口的字符</span><br>                <span class="hljs-type">char</span> d = s[left];<br>                <span class="hljs-comment">// 缩小窗口</span><br>                left++;<br>                <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>                <span class="hljs-keyword">if</span> (need.<span class="hljs-built_in">count</span>(d)) &#123;<br>                    <span class="hljs-keyword">if</span> (window[d] == need[d])<br>                        valid--;<br>                    window[d]--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 返回最小覆盖子串</span><br>        <span class="hljs-keyword">return</span> len == INT_MAX ? <span class="hljs-string">&quot;&quot;</span> : s.<span class="hljs-built_in">substr</span>(start, len);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4>·LeetCode-576:字符串的排列</h4>    <p>定长滑动窗口匹配字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 判断 s 中是否存在 t 的排列</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">checkInclusion</span><span class="hljs-params">(string t, string s)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; need, window;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : t) need[c]++;<br><br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> valid = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; s.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-type">char</span> c = s[right];<br>            right++;<br>            <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>            <span class="hljs-keyword">if</span> (need.<span class="hljs-built_in">count</span>(c)) &#123;<br>                window[c]++;<br>                <span class="hljs-keyword">if</span> (window[c] == need[c])<br>                    valid++;<br>            &#125;<br><br>            <span class="hljs-comment">// 判断左侧窗口是否要收缩</span><br>            <span class="hljs-keyword">while</span> (right - left &gt;= t.<span class="hljs-built_in">size</span>()) &#123;<span class="hljs-comment">// 定长窗口</span><br>                <span class="hljs-comment">// 在这里判断是否找到了合法的子串</span><br>                <span class="hljs-keyword">if</span> (valid == need.<span class="hljs-built_in">size</span>())<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-type">char</span> d = s[left];<br>                left++;<br>                <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>                <span class="hljs-keyword">if</span> (need.<span class="hljs-built_in">count</span>(d)) &#123;<br>                    <span class="hljs-keyword">if</span> (window[d] == need[d])<br>                        valid--;<br>                    window[d]--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 未找到符合条件的子串</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4>·LeetCode-438:找到字符串中所有字母异位词</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findAnagrams</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; need;<br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; window;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : t) &#123;<br>            need[c]++;<br>        &#125;<br><br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> valid = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 记录结果</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">while</span> (right &lt; s.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-type">char</span> c = s[right];<br>            right++;<br>            <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>            <span class="hljs-keyword">if</span> (need.<span class="hljs-built_in">count</span>(c)) &#123;<br>                window[c]++;<br>                <span class="hljs-keyword">if</span> (window[c] == need[c]) &#123;<br>                    valid++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 判断左侧窗口是否要收缩</span><br>            <span class="hljs-keyword">while</span> (right - left &gt;= t.<span class="hljs-built_in">size</span>()) &#123;<br>                <span class="hljs-comment">// 当窗口符合条件时，把起始索引加入 res</span><br>                <span class="hljs-keyword">if</span> (valid == need.<span class="hljs-built_in">size</span>()) &#123;<br>                    res.<span class="hljs-built_in">push_back</span>(left);<br>                &#125;<br>                <span class="hljs-type">char</span> d = s[left];<br>                left++;<br>                <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>                <span class="hljs-keyword">if</span> (need.<span class="hljs-built_in">count</span>(d)) &#123;<br>                    <span class="hljs-keyword">if</span> (window[d] == need[d]) &#123;<br>                        valid--;<br>                    &#125;<br>                    window[d]--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4>·LeetCode-3:无重复字符的最长子串</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; window;<br><br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 记录结果</span><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; s.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-type">char</span> c = s[right];<br>            right++;<br>            <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>            window[c]++;<br>            <span class="hljs-comment">// 判断左侧窗口是否要收缩</span><br>            <span class="hljs-keyword">while</span> (window[c] &gt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">char</span> d = s[left];<br>                left++;<br>                <span class="hljs-comment">// 进行窗口内数据的一系列更新</span><br>                window[d]--;<br>            &#125;<br>            <span class="hljs-comment">// 在这里更新答案</span><br>            res = <span class="hljs-built_in">max</span>(res, right - left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3>小而美的算法技巧——前缀和数组</h3>    <p>适用于原始数组不会被修改的情况下，频繁查询某个区间的累加和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumArray</span> &#123;<br>    <span class="hljs-comment">// 前缀和数组</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; preSum;<br><br>    <span class="hljs-comment">// 输入一个数组，构造前缀和</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">NumArray</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-comment">// preSum[0] = 0，便于计算累加和</span><br>        preSum.<span class="hljs-built_in">resize</span>(nums.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 计算 nums 的累加和</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; preSum.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            preSum[i] = preSum[i - <span class="hljs-number">1</span>] + nums[i - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查询闭区间 [left, right] 的累加和</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumRange</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> preSum[right + <span class="hljs-number">1</span>] - preSum[left];<span class="hljs-comment">//注意</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3>小而美的算法技巧——差分数组</h3>    <p>差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 差分数组工具类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Difference</span> &#123;<br>    <span class="hljs-comment">// 差分数组</span><br>    <span class="hljs-keyword">private</span>:<br>        vector&lt;<span class="hljs-type">int</span>&gt; diff;<br>    <br>    <span class="hljs-comment">// 输入一个初始数组，区间操作将在这个数组上进行</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Difference</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>            diff = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(nums.<span class="hljs-built_in">size</span>());<br>            <span class="hljs-comment">// 根据初始数组构造差分数组</span><br>            diff[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>                diff[i] = nums[i] - nums[i - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 给闭区间 [i, j] 增加 val（可以是负数）</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">increment</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>            diff[i] += val;<br>            <span class="hljs-keyword">if</span> (j + <span class="hljs-number">1</span> &lt; diff.<span class="hljs-built_in">size</span>()) &#123;<br>                diff[j + <span class="hljs-number">1</span>] -= val;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 返回结果数组</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(diff.size())</span></span>;<br>            <span class="hljs-comment">// 根据差分数组构造结果数组</span><br>            res[<span class="hljs-number">0</span>] = diff[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; diff.<span class="hljs-built_in">size</span>(); i++) &#123;<br>                res[i] = res[i - <span class="hljs-number">1</span>] + diff[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4>·LeetCode-1109:航班预订统计</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">corpFlightBookings</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; bookings, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// nums 初始化为全 0</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-comment">// 构造差分解法</span><br>        <span class="hljs-function">Difference <span class="hljs-title">df</span><span class="hljs-params">(nums)</span></span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; booking : bookings) &#123;<br>            <span class="hljs-comment">// 注意转成数组索引要减一哦!!!</span><br>            <span class="hljs-type">int</span> i = booking[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> j = booking[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> val = booking[<span class="hljs-number">2</span>];<br>            <span class="hljs-comment">// 对区间 nums[i..j] 增加 val</span><br>            df.<span class="hljs-built_in">increment</span>(i, j, val);<br>        &#125;<br>        <span class="hljs-comment">// 返回最终的结果数组</span><br>        <span class="hljs-keyword">return</span> df.<span class="hljs-built_in">result</span>();<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Difference</span> &#123;<br>        <span class="hljs-comment">// 差分数组</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; diff;<br><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Difference</span>(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>            <span class="hljs-built_in">assert</span>(!nums.<span class="hljs-built_in">empty</span>());<br>            diff.<span class="hljs-built_in">resize</span>(nums.<span class="hljs-built_in">size</span>());<br>            <span class="hljs-comment">// 构造差分数组</span><br>            diff[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>                diff[i] = nums[i] - nums[i - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 给闭区间 [i, j] 增加 val（可以是负数）</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">increment</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>            diff[i] += val;<br>            <span class="hljs-keyword">if</span> (j + <span class="hljs-number">1</span> &lt; diff.<span class="hljs-built_in">size</span>()) &#123;<br>                diff[j + <span class="hljs-number">1</span>] -= val;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(diff.size())</span></span>;<br>            <span class="hljs-comment">// 根据差分数组构造结果数组</span><br>            res[<span class="hljs-number">0</span>] = diff[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">1</span>; i &lt; diff.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>                res[i] = res[i - <span class="hljs-number">1</span>] + diff[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>  </article></body></html>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>编程</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习——链表</title>
    <link href="/2025/07/11/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/"/>
    <url>/2025/07/11/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>算法学习——链表</title></head><body>  <article class="blog-content"><p>种种数据结构，皆为数组（顺序存储）和链表（链式存储）的变换。</p><p>数据结构的关键点在于遍历和访问，即增删查改等基本操作。</p><p>种种算法，皆为穷举。穷举的关键点在于无遗漏和无冗余。</p><h3>双指针</h3><h4>LeetCode-21:合并两个有序链表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        <span class="hljs-comment">// 虚拟头结点</span><br>        <span class="hljs-function">ListNode <span class="hljs-title">dummy</span><span class="hljs-params">(<span class="hljs-number">-1</span>)</span>, *p </span>= &amp;dummy;<span class="hljs-comment">//注意</span><br>        ListNode *p1 = l1, *p2 = l2;<br>        <br>        <span class="hljs-keyword">while</span> (p1 != <span class="hljs-literal">nullptr</span> &amp;&amp; p2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-comment">// 比较 p1 和 p2 两个指针</span><br>            <span class="hljs-comment">// 将值较小的的节点接到 p 指针</span><br>            <span class="hljs-keyword">if</span> (p1-&gt;val &gt; p2-&gt;val) &#123;<br>                p-&gt;next = p2;<br>                p2 = p2-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                p-&gt;next = p1;<br>                p1 = p1-&gt;next;<br>            &#125;<br>            <span class="hljs-comment">// p 指针不断前进</span><br>            p = p-&gt;next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (p1 != <span class="hljs-literal">nullptr</span>) &#123;<br>            p-&gt;next = p1;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (p2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            p-&gt;next = p2;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4>LeetCode-86:分隔链表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">partition</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>       ListNode* dummy1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br>       ListNode* dummy2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br>       ListNode* p1 = dummy1;<br>       ListNode* p2 = dummy2;<br>       ListNode* p = head;<br><br>       <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">if</span>(p-&gt;val &gt;= x)&#123;<br>            p2-&gt;next = p;<br>            p2 = p2 -&gt;next;<span class="hljs-comment">//遍历到最后指的是空的</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            p1-&gt;next = p;<br>            p1 = p1 -&gt;next;<span class="hljs-comment">//遍历到最后指的是空的</span><br>        &#125;<br>        <span class="hljs-comment">//注意这里必须要断开 在更新p指针 如果直接p=p-&gt;next 那么最后要成环</span><br>        ListNode *temp = p-&gt;next;<br>        p-&gt;next = <span class="hljs-literal">nullptr</span>;<br>        p = temp;<br>       &#125;<br>       p1 -&gt; next = dummy2 -&gt;next;<span class="hljs-comment">//指针的位置一直在变，但是结点的位置没有改变</span><br>       <span class="hljs-keyword">return</span> dummy1-&gt;next;<span class="hljs-comment">//从上一句话可以知道不能返回p1-&gt;next;否则为空[]</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4>求链表倒数第k个结点</h4>    <p>其实不用双指针做法的话，可以先for循环遍历得到链表长度n，再用for循环从前往后遍历n-k+1个长度</p>    <p>这里用双指针做法只用遍历一次，p1指针指向头结点，先走k步，p2指针再指向头结点和p1头部往前走直到p1走到尾部，即n-k步，则p2指针停留再n-k+1的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 返回链表的倒数第 k 个节点</span><br><span class="hljs-function">ListNode* <span class="hljs-title">findFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    ListNode* p1 = head;<br>    <span class="hljs-comment">// p1 先走 k 步</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        p1 = p1 -&gt; next;<br>    &#125;<br>    ListNode* p2 = head;<br>    <span class="hljs-comment">// p1 和 p2 同时走 n - k 步</span><br>    <span class="hljs-keyword">while</span> (p1 != <span class="hljs-literal">nullptr</span>) &#123;<br>        p2 = p2 -&gt; next;<br>        p1 = p1 -&gt; next;<br>    &#125;<br>    <span class="hljs-comment">// p2 现在指向第 n - k + 1 个节点，即倒数第 k 个节点</span><br>    <span class="hljs-keyword">return</span> p2;<br>&#125;<br></code></pre></td></tr></table></figure><h4>LeetCode-160:相交链表</h4>    <p>让 p1 遍历完链表 A 之后开始遍历链表 B，让 p2 遍历完链表 B 之后开始遍历链表 A，这样相当于逻辑上两条链表接在了一起</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>        ListNode* p1 = headA;<br>        ListNode* p2 = headB;<br>        <span class="hljs-keyword">while</span>(p1 != p2)&#123;<br>            <span class="hljs-keyword">if</span>(p1 == <span class="hljs-literal">nullptr</span>)&#123;<span class="hljs-comment">// p1 走一步，如果走到 A 链表末尾，转到 B 链表</span><br>                p1 = headB;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                p1 = p1 -&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(p2 == <span class="hljs-literal">nullptr</span>)&#123;<span class="hljs-comment">// p2 走一步，如果走到 B 链表末尾，转到 A 链表</span><br>                p2 = headA;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                p2 = p2 -&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p1;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3>双指针——快慢指针</h3>    <h4>LeetCode-876:求链表中点</h4>    <p>快慢指针，每当慢指针 slow 前进一步，快指针 fast 就前进两步，这样，当 fast 走到链表末尾时，slow 就指向了链表中点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">middleNode</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// 快慢指针初始化指向 head</span><br>        ListNode* slow = head;<br>        ListNode* fast = head;<br>        <span class="hljs-comment">// 快指针走到末尾时停止</span><br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-comment">// 慢指针走一步，快指针走两步</span><br>            slow = slow-&gt;next;<br>            fast = fast-&gt;next-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">// 慢指针指向中点</span><br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>    <h4>LeetCode-142:环形链表</h4>    <p>每当慢指针 slow 前进一步，快指针 fast 就前进两步。如果 fast 最终能正常走到链表末尾，说明链表中没有环；如果 fast 走着走着竟然和 slow 相遇了，那肯定是 fast 在链表中转圈了，说明链表中含有环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode *fast, *slow;<br>        fast = slow = head;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>            <span class="hljs-keyword">if</span> (fast == slow) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (fast == <span class="hljs-literal">nullptr</span> || fast-&gt;next == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-comment">// fast 遇到空指针说明没有环</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 重新指向头结点</span><br>        slow = head;<br>        <span class="hljs-comment">// 快慢指针同步前进，相交点就是环起点</span><br>        <span class="hljs-keyword">while</span> (slow != fast) &#123;<br>            fast = fast-&gt;next;<br>            slow = slow-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3>三指针</h3><h4>反转链表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 反转以 head 为起点的单链表</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span> || head-&gt;next == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-comment">// 由于单链表的结构，至少要用三个指针才能完成迭代反转</span><br>        <span class="hljs-comment">// cur 是当前遍历的节点，pre 是 cur 的前驱结点，nxt 是 cur 的后继结点</span><br>        ListNode *pre, *cur, *nxt;<br>        pre = <span class="hljs-literal">nullptr</span>; cur = head; nxt = head-&gt;next;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-comment">// 逐个结点反转</span><br>            cur-&gt;next = pre;<span class="hljs-comment">//反转的关键步骤</span><br>            <span class="hljs-comment">// 更新指针位置</span><br>            pre = cur;<span class="hljs-comment">//pre指针移到cur指针位置去</span><br>            cur = nxt;<span class="hljs-comment">//cur指针移到nxt指针位置去</span><br>            <span class="hljs-keyword">if</span> (nxt != <span class="hljs-literal">nullptr</span>) &#123;<br>                nxt = nxt-&gt;next;<span class="hljs-comment">//nxt指针往下移一位</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 返回反转后的头结点</span><br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>   </article></body></html>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>编程</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯真题</title>
    <link href="/2025/07/02/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98/"/>
    <url>/2025/07/02/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>蓝桥杯真题练习</title></head><body>  <article class="blog-content">    <h3>好数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countNum</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> </span>&#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br><span class="hljs-type">int</span> n = i;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<span class="hljs-comment">//1表示奇数位 0表示偶数位 第一个处理个位数一定是1</span><br><span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<span class="hljs-comment">//默认是好数</span><br><span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-type">int</span> end = n % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (end % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//是偶数</span><br>ret = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>flag = <span class="hljs-number">0</span>;<span class="hljs-comment">//下一轮处理偶数位  </span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (end % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//不是偶数</span><br>ret = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>flag = <span class="hljs-number">1</span>;<br>&#125;<br>n = n / <span class="hljs-number">10</span>;<span class="hljs-comment">//移除已处理的最低位</span><br>&#125;<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">1</span>) &#123;<br>count++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>R格式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">float</span> d)</span> </span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">1</span>;<span class="hljs-comment">//64位整数存储能力</span><br><span class="hljs-keyword">while</span> (n--) &#123;<br>res = res * <span class="hljs-number">2</span>;<br>&#125;<br>res = res * d + <span class="hljs-number">0.5</span>;<span class="hljs-comment">//通过+0.5后再浮点数强转为整数实现四舍五入</span><br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>宝石组合</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<span class="hljs-comment">//最大公约数求解方法</span><br><span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-type">int</span> temp = n;<br>n = m % n;<br>m = temp;<br>&#125;<br><span class="hljs-keyword">return</span> m;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm_1</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<span class="hljs-comment">//最小公倍数求解方法,两数相乘÷最大公约数</span><br><span class="hljs-keyword">return</span> (m * n) / <span class="hljs-built_in">gcd</span>(m, n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm_2</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">lcm_1</span>(k, <span class="hljs-built_in">lcm_1</span>(m, n));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_S</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">return</span> m * n * k * <span class="hljs-built_in">lcm_2</span>(m, n, k) / <span class="hljs-built_in">lcm_1</span>(m, n) / <span class="hljs-built_in">lcm_1</span>(m, k) / <span class="hljs-built_in">lcm_1</span>(n, k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<span class="hljs-comment">//暴力</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br><span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//sort默认升序排序，从小到大</span><br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>, z = <span class="hljs-number">0</span>, max = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j + <span class="hljs-number">1</span>; k &lt; n; k++)&#123;<br><span class="hljs-type">int</span> s = <span class="hljs-built_in">get_S</span>(nums[i], nums[j], nums[k]);<br><span class="hljs-keyword">if</span> (s &gt; max) &#123;<br>max = s;<br>x = nums[i], y = nums[j], z = nums[k];<br>&#125;<br>            &#125;<br>&#125;<br>&#125;<br>cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; nums[i];<br>&#125;<br><span class="hljs-built_in">func</span>(nums);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>爬山</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">searchMax</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; nums.<span class="hljs-built_in">size</span>(); j++) &#123;<br><span class="hljs-keyword">if</span> ( nums[j] &gt; max) &#123;<br>max = nums[j];<br>i = j;<span class="hljs-comment">//注意这个巧妙的点</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">magic</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> P, <span class="hljs-type">int</span> Q)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (P &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-type">int</span> t = <span class="hljs-built_in">searchMax</span>(nums);<br>nums[t] = <span class="hljs-built_in">sqrt</span>(nums[t]);<span class="hljs-comment">//开根sqrt</span><br>P--;<br>&#125;<br><span class="hljs-keyword">while</span> (Q &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-type">int</span> j = <span class="hljs-built_in">searchMax</span>(nums);<br>nums[j] /= <span class="hljs-number">2</span>;<br>Q--;<br>&#125;<br><span class="hljs-keyword">return</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n ;<br><span class="hljs-type">int</span> P ;<span class="hljs-comment">//开根</span><br><span class="hljs-type">int</span> Q ;<span class="hljs-comment">//除以2</span><br>cin &gt;&gt; n &gt;&gt; P &gt;&gt; Q;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mt</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; mt[i];<br>&#125;<br><span class="hljs-built_in">magic</span>(mt, P, Q);<br><br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mt.<span class="hljs-built_in">size</span>(); i++) &#123;<br>sum += mt[i];<br>&#125;<br>cout &lt;&lt; sum &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>拔河（前缀和问题）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; preSum;<span class="hljs-comment">//采用前缀和技巧解体</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>preSum.<span class="hljs-built_in">resize</span>(nums.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>);<span class="hljs-comment">//preSum[0]=0，便于计算累加和，同时所有元素都被初始化为0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; preSum.<span class="hljs-built_in">size</span>(); i++) &#123;<br>preSum[i] = preSum[i - <span class="hljs-number">1</span>] + nums[i - <span class="hljs-number">1</span>];<span class="hljs-comment">//preSum[i]求得其实是nums数组的0~i-1的元素和</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 查询闭区间 [left, right] 的累加和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumRange</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br><span class="hljs-keyword">return</span> preSum[right + <span class="hljs-number">1</span>] - preSum[left];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-type">int</span> min = INT_MAX;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-type">int</span> x = preSum[nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>] - preSum[i];<span class="hljs-comment">//得到后半段</span><br><span class="hljs-type">int</span> y =<span class="hljs-built_in">abs</span>( x - preSum[i] );<span class="hljs-comment">//后半段减去前半段的绝对值</span><br><span class="hljs-keyword">if</span> ( y &lt; min) &#123;<br>min = y;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> min;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>cin &gt;&gt; n;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">strength</span>(n);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; strength[i];<br>&#125;<br><span class="hljs-built_in">sort</span>(strength.<span class="hljs-built_in">begin</span>(),strength.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//升序排序</span><br><br><span class="hljs-built_in">createArray</span>(strength);<br><br>cout &lt;&lt; <span class="hljs-built_in">findMin</span>(preSum) &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>冶炼金属</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> v_min = <span class="hljs-number">1</span>, v_max = INT_MAX;<span class="hljs-comment">//注意初始值</span><br><span class="hljs-keyword">while</span> (n--) &#123;<br><span class="hljs-type">int</span> a, b;<br>cin &gt;&gt; a &gt;&gt; b;<br>v_min = <span class="hljs-built_in">max</span>((a / (b + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>),v_min);<br>v_max = <span class="hljs-built_in">min</span>((a / b),v_max);<br>&#125;<br>cout &lt;&lt; v_min &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v_max;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>·飞机降落</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">plane</span> &#123;<br>    <span class="hljs-type">int</span> t, d, l;<br>&#125;;<br><span class="hljs-comment">//思路：找到所有全排列，然后判断</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;plane&gt;&amp; nums, vector&lt;plane&gt;&amp; track, vector&lt;<span class="hljs-type">bool</span>&gt;&amp; used)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (track.<span class="hljs-built_in">size</span>() == nums.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> time = <span class="hljs-number">0</span>;<br>        time = track[<span class="hljs-number">0</span>].t + track[<span class="hljs-number">0</span>].l;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; track.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            time = <span class="hljs-built_in">max</span>(time, track[i].t);<br>            <span class="hljs-keyword">if</span> (time &gt; track[i].t + track[i].d) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            time += track[i].l;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//回溯算法最后都会回到这里</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (used[i]) <span class="hljs-keyword">continue</span>;<br>        used[i] = <span class="hljs-literal">true</span>;<br>        track.<span class="hljs-built_in">push_back</span>(nums[i]);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">backtrack</span>(nums, track, used)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//有正确结果则返回true</span><br>        &#125;<br><br>        track.<span class="hljs-built_in">pop_back</span>();<br>        used[i] = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//默认返回false，如果所有结果都不对则返回false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    vector&lt;vector&lt;plane&gt;&gt; testCases;<span class="hljs-comment">//存储测试数据</span><br>    vector&lt;<span class="hljs-type">bool</span>&gt; results;<br><br>    <span class="hljs-comment">//读取所有测试数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++) &#123;<br>        <span class="hljs-type">int</span> n;<br>        cin &gt;&gt; n;<br>        <span class="hljs-function">vector&lt;plane&gt; <span class="hljs-title">p</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            cin &gt;&gt; p[j].t &gt;&gt; p[j].d &gt;&gt; p[j].l;<br>        &#125;<br>        testCases.<span class="hljs-built_in">push_back</span>(p);<br>    &#125;<br><br>    <span class="hljs-comment">//处理所有测试数据（不立即输出）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++) &#123;<br>        vector&lt;plane&gt; track;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">used</span><span class="hljs-params">(testCases[i].size(), <span class="hljs-literal">false</span>)</span></span>;<br><br>        <span class="hljs-type">bool</span> result = <span class="hljs-built_in">backtrack</span>(testCases[i], track, used);<br>        results.<span class="hljs-built_in">push_back</span>(result);<br>    &#125;<br><br>    <span class="hljs-comment">//统一输出所有结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">bool</span> res : results) &#123;<span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">if</span> (res) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>接龙数列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getLeft</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>n = <span class="hljs-built_in">abs</span>(n);<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//注意先判断是否为0的情况</span><br><span class="hljs-keyword">while</span> (n &gt;= <span class="hljs-number">10</span>) &#123;<br>n /= <span class="hljs-number">10</span>;<span class="hljs-comment">//无限取除运算得到最高位</span><br>&#125;<br><span class="hljs-keyword">return</span> n;<br> &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getRight</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//注意先判断是否为0的情况</span><br><span class="hljs-keyword">while</span> (n &gt;= <span class="hljs-number">10</span>) &#123;<span class="hljs-comment">//无限取模运算得到最低位</span><br>n %= <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (j &lt; n) &#123;<br><span class="hljs-type">int</span> li = <span class="hljs-built_in">getLeft</span>(nums[i]);<br><span class="hljs-type">int</span> ri = <span class="hljs-built_in">getRight</span>(nums[i]);<br><span class="hljs-type">int</span> lj = <span class="hljs-built_in">getLeft</span>(nums[j]);<br><span class="hljs-type">int</span> rj = <span class="hljs-built_in">getRight</span>(nums[j]);<br><br><span class="hljs-keyword">if</span> (ri != lj) &#123;<br>res++;<br>nums.<span class="hljs-built_in">erase</span>(nums.<span class="hljs-built_in">begin</span>()+ j );<br>n--;<br><span class="hljs-built_in">judge</span>(nums, i, j );<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ri == lj) &#123;<br><span class="hljs-built_in">judge</span>(nums, i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cin &gt;&gt; n;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; nums[i];<br>&#125;<br><br><span class="hljs-type">int</span> x = <span class="hljs-built_in">judge</span>(nums, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br><br>cout &lt;&lt; x &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>字串简写</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">count</span><span class="hljs-params">(string S, <span class="hljs-type">char</span> c1, <span class="hljs-type">char</span> c2, <span class="hljs-type">int</span> K)</span> </span>&#123;<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; S.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-keyword">if</span> (S[i] == c1) &#123;<br><span class="hljs-type">int</span> j = i + K - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (j &lt; S.<span class="hljs-built_in">size</span>()) &#123;<span class="hljs-comment">//注意这里不能数组越界，要加一个判断</span><br><span class="hljs-keyword">for</span> (j; j &lt; S.<span class="hljs-built_in">size</span>(); j++) &#123;<br><span class="hljs-keyword">if</span> (S[j] == c2) &#123;<br>res++;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> K;<br>cin &gt;&gt; K;<br>string S;<br><span class="hljs-type">char</span> c1, c2;<br>cin &gt;&gt; S &gt;&gt; c1 &gt;&gt; c2;<br><br><span class="hljs-type">int</span> num = <span class="hljs-built_in">count</span>(S, c1, c2, K);<br>cout &lt;&lt; num &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>可分解的正整数</h3><p>第一次做，只能判断3个连续数列的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">count</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-type">int</span> m = nums[i] / <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> s = m - <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b = m + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (nums[i] == m + s + b) &#123;<br>res++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">list</span><span class="hljs-params">(n)</span></span>;<span class="hljs-comment">//注意提前设置数组大小，否则会数组越界</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; list[i];<br>&#125;<br>cout &lt;&lt; <span class="hljs-built_in">count</span>(list) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后发现这道题，是找最小长度为3的且差值为1的等差数列，那如果我前后无线延申，除1以外的每一个数都可以，例如2则可以分解为：-1+0+1+2，满足条件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, res = <span class="hljs-number">0</span>;<br>cin &gt;&gt; n;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">list</span><span class="hljs-params">(n)</span></span>;<span class="hljs-comment">//注意提前设置数组大小，否则会数组越界</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; list[i];<br><span class="hljs-keyword">if</span> (list[i] != <span class="hljs-number">1</span>) &#123;<br>res++;<br>&#125;<br>&#125;<br>cout &lt;&lt; res &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>产值调整</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; list)</span> </span>&#123;<br><span class="hljs-type">int</span> A = list[<span class="hljs-number">0</span>], B = list[<span class="hljs-number">1</span>], C = list[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list[<span class="hljs-number">3</span>]; i++) &#123;<br>A = (list[<span class="hljs-number">1</span>] + list[<span class="hljs-number">2</span>]) / <span class="hljs-number">2</span>;<br>B = (list[<span class="hljs-number">0</span>] + list[<span class="hljs-number">2</span>]) / <span class="hljs-number">2</span>;<br>C = (list[<span class="hljs-number">0</span>] + list[<span class="hljs-number">1</span>]) / <span class="hljs-number">2</span>;<br>&#125;<br>cout &lt;&lt; A &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; B &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; C &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> T;<br>cin &gt;&gt; T;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; nums;<span class="hljs-comment">//注意这里先要初始化为空</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++) &#123;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">list</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>cin &gt;&gt; list[j];<br>&#125;<br>nums.<span class="hljs-built_in">push_back</span>(list);<span class="hljs-comment">//这里插值，如果上面不为空，那么就多了</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++) &#123;<br><span class="hljs-built_in">change</span>(nums[i]);<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>画展布置</h3><p>找全排列，典型dfs问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>vector&lt;<span class="hljs-type">int</span>&gt;track;<br>vector&lt;<span class="hljs-type">bool</span>&gt;used;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getL</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> m)</span> </span>&#123;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-type">int</span> x = <span class="hljs-built_in">abs</span>(nums[i + <span class="hljs-number">1</span>] * nums[i + <span class="hljs-number">1</span>] - nums[i] * nums[i]);<span class="hljs-comment">//注意绝对值</span><br>l += x;<br>&#125;<br><span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMinL</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br><span class="hljs-type">int</span> target = INT_MAX;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-type">int</span> y = <span class="hljs-built_in">getL</span>(res[i],m);<br><span class="hljs-keyword">if</span> (y &lt; target) &#123;<br>target = y;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums,<span class="hljs-type">int</span> m)</span></span>&#123;<br><span class="hljs-keyword">if</span> (track.<span class="hljs-built_in">size</span>() == m) &#123;<br>res.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(track.<span class="hljs-built_in">begin</span>(), track.<span class="hljs-built_in">end</span>()));<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-keyword">if</span> (used[i]) <span class="hljs-keyword">continue</span>;<br>used[i] = <span class="hljs-literal">true</span>;<br>track.<span class="hljs-built_in">push_back</span>(nums[i]);<br><br><span class="hljs-built_in">backtrack</span>(nums, m);<br><br>track.<span class="hljs-built_in">pop_back</span>();<br>used[i] = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> N, M;<br>cin &gt;&gt; N &gt;&gt; M;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(N)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>cin &gt;&gt; nums[i];<br>&#125;<br>used = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(nums.<span class="hljs-built_in">size</span>(), <span class="hljs-literal">false</span>);<br><span class="hljs-built_in">backtrack</span>(nums,M);<br>cout &lt;&lt; <span class="hljs-built_in">findMinL</span>(M) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <h3>水质检测</h3><p>dp动态规划问题，这个不是太会，还需要多多练习</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span><span class="hljs-number">+10</span>;<span class="hljs-comment">//初始化每行长度为10的6次方</span><br><span class="hljs-type">char</span> s[<span class="hljs-number">2</span>][N];<span class="hljs-comment">//存储两行网格</span><br><span class="hljs-type">int</span> dp[<span class="hljs-number">2</span>][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(string s1,string s2)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() != s<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> n = s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">if</span> (n &gt;= N) &#123; <span class="hljs-comment">// 超出数组大小</span><br>cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//将字符串存入二维数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(); i++) &#123;<br>s[<span class="hljs-number">0</span>][i] = s1[i];<br>s[<span class="hljs-number">1</span>][i] = s2[i];<br>&#125;<br><br><span class="hljs-comment">//查找最左侧和最右侧的检测器位置</span><br><span class="hljs-type">int</span> st = s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(), en = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;#&#x27;</span> || s[<span class="hljs-number">1</span>][i] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>st = <span class="hljs-built_in">min</span>(i, st);<br>en = <span class="hljs-built_in">max</span>(i, en);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//如果查找完发现没有检测器</span><br><span class="hljs-keyword">if</span> (st == s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化dp数组为较大值</span><br><span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(dp));<br><br><span class="hljs-comment">//处理起始行st的初始化</span><br>dp[<span class="hljs-number">0</span>][st] = (s[<span class="hljs-number">0</span>][st] == <span class="hljs-string">&#x27;#&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br>dp[<span class="hljs-number">1</span>][st] = (s[<span class="hljs-number">1</span>][st] == <span class="hljs-string">&#x27;#&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//动态规划,从st+1到en</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = st + <span class="hljs-number">1</span>; i &lt;= en; i++) &#123;<br><span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<span class="hljs-comment">//如果上排是&#x27;#&#x27;，dp[i][0] = min(从左列上排直接过来, 从左列下排转移)</span><br>dp[<span class="hljs-number">0</span>][i] = <span class="hljs-built_in">min</span>(dp[<span class="hljs-number">0</span>][i - <span class="hljs-number">1</span>], dp[<span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>] + (s[<span class="hljs-number">1</span>][i] == <span class="hljs-string">&#x27;#&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果上面是&#x27;.&#x27;，dp[i][0] = min(从左列上排直接过来, 从左列下排转移) + 1（需要放置检测器）</span><br>dp[<span class="hljs-number">0</span>][i] = <span class="hljs-built_in">min</span>(dp[<span class="hljs-number">0</span>][i - <span class="hljs-number">1</span>], dp[<span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>] + (s[<span class="hljs-number">1</span>][i] == <span class="hljs-string">&#x27;#&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (s[<span class="hljs-number">1</span>][i] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<span class="hljs-comment">//同上</span><br>dp[<span class="hljs-number">1</span>][i] = <span class="hljs-built_in">min</span>(dp[<span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>], dp[<span class="hljs-number">0</span>][i - <span class="hljs-number">1</span>] + (s[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;#&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//同上</span><br>dp[<span class="hljs-number">1</span>][i] = <span class="hljs-built_in">min</span>(dp[<span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>], dp[<span class="hljs-number">0</span>][i - <span class="hljs-number">1</span>] + (s[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;#&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-built_in">min</span>(dp[<span class="hljs-number">0</span>][en], dp[<span class="hljs-number">1</span>][en]) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string s1, s2;<br>cin &gt;&gt; s1 &gt;&gt; s2;<br><span class="hljs-built_in">solve</span>(s1, s2);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>  </article></body></html>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>编程</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《夏洛特烦恼》思考</title>
    <link href="/2025/06/26/%E3%80%8A%E5%A4%8F%E6%B4%9B%E7%89%B9%E7%83%A6%E6%81%BC%E3%80%8B%E6%80%9D%E8%80%83/"/>
    <url>/2025/06/26/%E3%80%8A%E5%A4%8F%E6%B4%9B%E7%89%B9%E7%83%A6%E6%81%BC%E3%80%8B%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>《夏洛特烦恼》笔记与思考</title></head><body>  <article class="blog-content">    <h2>《夏洛特烦恼》笔记与思考</h2>    <p>今天在手机上刷到了这部电影的切片，觉得非常好笑，遂决定看一下完整版，       不想这部电影是在2015年发布，已经是十年前了啊，本想当作喜剧给自己好好放松一下，       但是最后电影所传达的情感还是引发了我的一点思考，喜剧之下处处探讨着人性深处的欲望和真情，我想简单谈一下自己的理解。</p>    <h3>简介</h3>    <p>《夏洛特烦恼》讲述了一事无成的夏洛参加昔日女神婚礼，受尽欺负，醉酒后却因“白日梦”意外穿越回高中时代。        他利用“先知”改写命运，名利双收迎娶女神，却在走向人生巅峰时陷入虚妄与背叛。        历经沧桑后终于醒悟，发现最珍贵的正是被自己忽视的平凡真情（妻子马冬梅），最终回归并珍惜当下的温暖生活。</p>    <center>        <img src="/images/movies/xltfn-1.webp" alt="夏洛特烦恼" style="zoom:50%;border-radius:8px;margin-bottom: 20px;"/>    </center>    <h3>错位感中的醒悟</h3>    <p>穿越回过去，夏洛利用“先知”圆满了所有曾经的遗憾，成为明星、追到女神、名利双收。    然而，讽刺的是，这些并不能给他带来预期的持久幸福感，反而让他在欲望的最顶点经历更深的空虚与无助。    当夏洛患病即将失去包括生命在内的一切，尤其是那个一直被他忽视、践踏却仍默默关心他的马冬梅时，他才看清什么才是生命中最美好的东西。直击人心。    电影的最后，回到现实，夏洛处处粘着马冬梅，享受那失而复得的温暖。</p>    <h3>欲望陷阱和幸福本质</h3>    <p>夏洛的经历让我们明白，我们苦苦追求的外在成功，被他人羡慕的生活，可能只是我们内心美化出来的幻影。    真正拥有时，幻影背后的脆弱才会暴露无遗。</p>    <h3>什么才是真正的幸福</h3>    <p>知足的人最幸福。幸福不能被简单的标签定义，幸福是源于发自内心的自我认同和肯定，幸福可能更源于我们知足常乐的心态。    但悲哀的是，现实生活中，幸福就在我们身边，在持续的、无条件的爱与陪伴中，但往往会被我们忽略。</p>    <h3>人性的剖析</h3>    <p>攀附心理的普遍性：两种截然不同的人生，同学们对待夏洛呈现出截然不同的状态，揭露了现实中人趋利避害的本性，更是筛选了谁才是真正对你好的人。</p>    <p>平凡或许更加伟大：大傻春看似傻里傻气，但他却有人生中最珍贵的品质：真诚、知足、乐观。在夏洛的梦境中，正因为这样的品质让他娶到了马冬梅，过上了幸福的日子。    顺便说一句，不知道为啥，这里大春让我联想到电视剧《雍正王朝》里雍正的顶级谋士邬思道的一句话“争是不争，不争是争，夫唯不争，故天下莫能与之争。”</p>    <h3>“回不去”的过去和“过不好”的现在</h3>    <p>人总在失去时才会觉醒。但生活不是电影，没有机会让我们再来一次，逃避无法解决任何问题，关键在于学会成长，面对当下。同时让我们珍惜当下感恩所有，与其幻想，不如好好珍惜眼前人。    我们总在幻想未来，其实当下就是最好。</p>  </article></body></html>]]></content>
    
    
    <categories>
      
      <category>电影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影观后感</tag>
      
      <tag>分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在·广州</title>
    <link href="/2024/12/05/%E5%9C%A8%C2%B7%E5%B9%BF%E5%B7%9E/"/>
    <url>/2024/12/05/%E5%9C%A8%C2%B7%E5%B9%BF%E5%B7%9E/</url>
    
    <content type="html"><![CDATA[<body>  <article class="blog-content">    <h3>探索广州</h3>    <p>2024.11.29-2024.12.04</p>    <p>蓝天 白云 暖阳 I like GuangZhou</p>    <h4>广东软件科学园</h4>    <center>        <img src="/images/guangzhou/gz-1.webp" alt="软件园1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/guangzhou/gz-2.webp" alt="软件园2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>    </center>    <h4>广州塔</h4>    <center>        <img src="/images/guangzhou/gz-3.webp" alt="广州塔" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>    </center>    <h4>海心沙</h4>    <center>        <img src="/images/guangzhou/gz-4.webp" alt="海心沙" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>    </center>        <h4>圣心大教堂</h4>    <center>        <img src="/images/guangzhou/gz-5.webp" alt="圣心大教堂" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>    </center>        <h4>北京路</h4>    <center>        <img src="/images/guangzhou/gz-6.webp" alt="北京路" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>    </center>    <h4>隔壁深圳</h4>    <p>一个全是大厂的城市，但对我们而言却并不一定全是机会，机会要靠自己把握</p>    <center>        <img src="/images/guangzhou/sz-1.webp" alt="深圳1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/guangzhou/sz-2.webp" alt="深圳2" style="zoom:65%;border-radius:8px;"/>    </center>    <p>最后小帅一下哈哈</p>    <center>        <img src="/images/guangzhou/sz-3.webp" alt="红树林海滨公园" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>    </center>  </article></body>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在·厦门</title>
    <link href="/2024/07/27/%E5%9C%A8%C2%B7%E5%8E%A6%E9%97%A8/"/>
    <url>/2024/07/27/%E5%9C%A8%C2%B7%E5%8E%A6%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<body>  <article class="blog-content">    <h3>探索厦门</h3>    <p>2024.7.20-2024.7.26</p>    <h4>厦门植物园</h4>    <p>印象最深刻的就是这个“达利园效应”嘿嘿</p>    <center>        <img src="/images/xiamen/xiamen-1.webp" alt="厦门植物园1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xiamen/xiamen-2.webp" alt="厦门植物园2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>    </center>    <h4>厦门城区</h4>    <p>大龙虾嗷呜~</p>    <center>        <img src="/images/xiamen/xiamen-3.webp" alt="厦门城区1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xiamen/xiamen-4.webp" alt="厦门城区2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xiamen/xiamen-5.webp" alt="厦门城区3" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xiamen/xiamen-6.webp" alt="厦门城区4" style="zoom:65%;border-radius:8px;"/>    </center>    <h4>集美学村</h4>    <center>        <img src="/images/xiamen/xiamen-7.webp" alt="集美学村1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xiamen/xiamen-8.webp" alt="集美学村2" style="zoom:65%;border-radius:8px;"/>    </center>    <h4>隔壁泉州</h4>    <p>泉州的棉花糖天空美不美？</p>    <center>        <img src="/images/xiamen/qz-1.webp" alt="泉州1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xiamen/qz-2.webp" alt="泉州2" style="zoom:65%;border-radius:8px;"/>    </center>    <p>最后发生了一个小插曲，返程的日子正好是台风“格美”入境泉州的日子，飞机延误，被迫在酒店多呆了2天</p>  </article></body>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在·江西</title>
    <link href="/2024/05/05/%E5%9C%A8%C2%B7%E6%B1%9F%E8%A5%BF/"/>
    <url>/2024/05/05/%E5%9C%A8%C2%B7%E6%B1%9F%E8%A5%BF/</url>
    
    <content type="html"><![CDATA[<body>  <article class="blog-content">    <h3>探索江西</h3>    <p>2024.5.1-2024.5.5</p>    <h4>萍乡武功山</h4>    <p>反穿路线总耗时2天get武功山，如果满分是10分，我会给武功山9.9分，差0.1分是因为五一下雨全是稀泥巴，沿途风景太绝了，让我沉醉</p>    <center>        <img src="/images/jiangxi/jx-1.webp" alt="武功山1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-2.webp" alt="武功山2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-3.webp" alt="武功山3" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-4.webp" alt="武功山4" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-5.webp" alt="武功山5" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-6.webp" alt="武功山6" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-7.webp" alt="武功山7" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-8.webp" alt="武功山8" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-9.webp" alt="武功山9" style="zoom:65%;border-radius:8px;"/>    </center>    <h4>南昌</h4>    <p>夜晚的滕王阁好美</p>    <center>        <img src="/images/jiangxi/jx-10.webp" alt="南昌1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-11.webp" alt="南昌2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-12.webp" alt="南昌3" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/jiangxi/jx-13.webp" alt="南昌4" style="zoom:65%;border-radius:8px;"/>    </center>  </article></body>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在·西安</title>
    <link href="/2023/07/28/%E5%9C%A8%C2%B7%E8%A5%BF%E5%AE%89/"/>
    <url>/2023/07/28/%E5%9C%A8%C2%B7%E8%A5%BF%E5%AE%89/</url>
    
    <content type="html"><![CDATA[<body>  <article class="blog-content">    <h3>探索西安</h3>    <p>2023.7.17-2023.7.27</p>    <h4>大唐不夜城</h4>    <p>非常漂亮，或许此刻我的的心情和几百年前外国人第一次走进长安是一样的吧</p>    <center>        <img src="/images/xian/xian-1.webp" alt="大唐不夜城1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-2.webp" alt="大唐不夜城2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-3.webp" alt="大唐不夜城3" style="zoom:65%;border-radius:8px;"/>    </center>    <h4>秦始皇兵马俑</h4>    <p>震撼 惊叹 佩服</p>    <center>        <img src="/images/xian/xian-4.webp" alt="兵马俑1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-5.webp" alt="兵马俑2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-6.webp" alt="兵马俑3" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-7.webp" alt="兵马俑4" style="zoom:65%;border-radius:8px;"/>    </center>    <h4>夜爬华山</h4>    <p>晚9点到凌晨4点，7小时登顶华山，看到了超美的日出，累但值得</p>    <center>        <img src="/images/xian/xian-8.webp" alt="华山1" style="zoom:50%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-9.webp" alt="华山2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-10.webp" alt="华山3" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-11.webp" alt="华山4" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-12.webp" alt="华山5" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/xian/xian-13.webp" alt="华山6" style="zoom:35%;border-radius:8px;"/>    </center>  </article></body>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三下乡活动</title>
    <link href="/2023/07/10/%E4%B8%89%E4%B8%8B%E4%B9%A1/"/>
    <url>/2023/07/10/%E4%B8%89%E4%B8%8B%E4%B9%A1/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>重庆市巫山县下庄村，见到了全国脱贫攻坚楷模毛相林书记，开发数字名片助力乡村旅游</title></head><body>  <article class="blog-content">    <h3>下庄精神</h3>    <p>2023.7.3-2023.7.9</p>    <p>不甘落后、不等不靠、不畏艰险、不怕牺牲</p>    <center>        <img src="/images/sanxiaxiang/sxx-1.webp" alt="下庄村1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/sanxiaxiang/sxx-2.webp" alt="下庄村2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/sanxiaxiang/sxx-3.webp" alt="下庄村3" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/sanxiaxiang/sxx-4.webp" alt="下庄村4" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/sanxiaxiang/sxx-5.webp" alt="下庄村5" style="zoom:65%;border-radius:8px;"/>    </center>    <p>绝壁上开凿一条“天路”，下庄人书写当代愚公传奇。我想，只要心怀热爱，再加上一点点努力，或许再难的事情也没有那么难了吧。</p>  </article></body></html>]]></content>
    
    
    <categories>
      
      <category>大学本科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>实践</tag>
      
      <tag>大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在·云南</title>
    <link href="/2022/07/28/%E5%9C%A8%C2%B7%E4%BA%91%E5%8D%97/"/>
    <url>/2022/07/28/%E5%9C%A8%C2%B7%E4%BA%91%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh-CN"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>高考后的第一次旅行</title></head><body>  <article class="blog-content">    <h3>探索云南</h3>    <p>2022.7.17-2022.7.27</p>    <h4>丽江古城</h4>    <p>古城很大 好逛 有意思</p>    <center>        <img src="/images/yunnan/yn-1.webp" alt="丽江古城1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/yunnan/yn-2.webp" alt="丽江古城2" style="zoom:65%;border-radius:8px;"/>    </center>    <h4>茶马古道-玉龙雪山</h4>    <p>玉龙雪山没有开放 远远望了一下 不过很漂亮</p>    <center>        <img src="/images/yunnan/yn-3.webp" alt="茶马古道" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/yunnan/yn-4.webp" alt="玉龙雪山1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/yunnan/yn-5.webp" alt="玉龙雪山2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/yunnan/yn-6.webp" alt="玉龙雪山3" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/yunnan/yn-7.webp" alt="茶马古道2" style="zoom:65%;border-radius:8px;"/>    </center>    <h4>大理</h4>    <p>理想邦超级多人拍照比较出片，白天去的大理古城没啥感觉</p>    <center>        <img src="/images/yunnan/yn-8.webp" alt="理想邦" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/yunnan/yn-9.webp" alt="大理古城" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>    </center>        <p>调皮一下</p>    <center>        <img src="/images/yunnan/yn-14.webp" alt="大理酒店" style="zoom:65%;border-radius:8px;"/>    </center>    <h4>西双版纳</h4>    <p>版纳在本次旅途中给我的体验很好，仅仅次于第一天到的丽江古城</p>    <center>        <img src="/images/yunnan/yn-10.webp" alt="西双版纳1" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/yunnan/yn-11.webp" alt="西双版纳2" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/yunnan/yn-12.webp" alt="西双版纳3" style="zoom:65%;border-radius:8px;margin-bottom: 20px;"/>        <img src="/images/yunnan/yn-13.webp" alt="西双版纳4" style="zoom:65%;border-radius:8px;"/>    </center>  </article></body></html>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
